package main

import "testing"

func TestPartOneExample(t *testing.T) {
	instructions := exampleInstructions()
	expected := 13140
	got := partOne(instructions)
	if expected != got {
		t.Errorf("Expected %d, got %d", expected, got)
	}
}

func TestPartTwoExample(t *testing.T) {
	instructions := exampleInstructions()
	expected := `##..##..##..##..##..##..##..##..##..##..
###...###...###...###...###...###...###.
####....####....####....####....####....
#####.....#####.....#####.....#####.....
######......######......######......####
#######.......#######.......#######.....
`
	got := partTwo(instructions)
	if expected != got {
		t.Errorf("CRT image does not match\n\nExpected:\n\n%s\n\nGot:\n\n%s\n", expected, got)
	}
}

func exampleInstructions() []instruction {
	return []instruction{
		{"addx", 15},
		{"addx", -11},
		{"addx", 6},
		{"addx", -3},
		{"addx", 5},
		{"addx", -1},
		{"addx", -8},
		{"addx", 13},
		{"addx", 4},
		{"noop", 0},
		{"addx", -1},
		{"addx", 5},
		{"addx", -1},
		{"addx", 5},
		{"addx", -1},
		{"addx", 5},
		{"addx", -1},
		{"addx", 5},
		{"addx", -1},
		{"addx", -35},
		{"addx", 1},
		{"addx", 24},
		{"addx", -19},
		{"addx", 1},
		{"addx", 16},
		{"addx", -11},
		{"noop", 0},
		{"noop", 0},
		{"addx", 21},
		{"addx", -15},
		{"noop", 0},
		{"noop", 0},
		{"addx", -3},
		{"addx", 9},
		{"addx", 1},
		{"addx", -3},
		{"addx", 8},
		{"addx", 1},
		{"addx", 5},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"addx", -36},
		{"noop", 0},
		{"addx", 1},
		{"addx", 7},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"addx", 2},
		{"addx", 6},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"addx", 1},
		{"noop", 0},
		{"noop", 0},
		{"addx", 7},
		{"addx", 1},
		{"noop", 0},
		{"addx", -13},
		{"addx", 13},
		{"addx", 7},
		{"noop", 0},
		{"addx", 1},
		{"addx", -33},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"addx", 2},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"addx", 8},
		{"noop", 0},
		{"addx", -1},
		{"addx", 2},
		{"addx", 1},
		{"noop", 0},
		{"addx", 17},
		{"addx", -9},
		{"addx", 1},
		{"addx", 1},
		{"addx", -3},
		{"addx", 11},
		{"noop", 0},
		{"noop", 0},
		{"addx", 1},
		{"noop", 0},
		{"addx", 1},
		{"noop", 0},
		{"noop", 0},
		{"addx", -13},
		{"addx", -19},
		{"addx", 1},
		{"addx", 3},
		{"addx", 26},
		{"addx", -30},
		{"addx", 12},
		{"addx", -1},
		{"addx", 3},
		{"addx", 1},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"addx", -9},
		{"addx", 18},
		{"addx", 1},
		{"addx", 2},
		{"noop", 0},
		{"noop", 0},
		{"addx", 9},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
		{"addx", -1},
		{"addx", 2},
		{"addx", -37},
		{"addx", 1},
		{"addx", 3},
		{"noop", 0},
		{"addx", 15},
		{"addx", -21},
		{"addx", 22},
		{"addx", -6},
		{"addx", 1},
		{"noop", 0},
		{"addx", 2},
		{"addx", 1},
		{"noop", 0},
		{"addx", -10},
		{"noop", 0},
		{"noop", 0},
		{"addx", 20},
		{"addx", 1},
		{"addx", 2},
		{"addx", 2},
		{"addx", -6},
		{"addx", -11},
		{"noop", 0},
		{"noop", 0},
		{"noop", 0},
	}
}
